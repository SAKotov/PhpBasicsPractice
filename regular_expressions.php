<?php
/*$str = 'grey';
$pattern = '/gr.y/';

if(preg_match($pattern, $str)){
    echo "Строка |<b>$str</b>| <span style='color: green'>совпала</span> с шаблоном <b><em>$pattern</em></b>";
}else{
    echo "Строка |<b>$str</b>| <span style='color: red'>не совпала</span> с шаблоном<b><em>$pattern</em></b>";
}*/


// 1. Дана строка 'ahb acb aeb aeeb adcb axeb'.
// Напишите регулярку, которая найдет строки ahb, acb, aeb по шаблону: буква 'a', любой символ, буква 'b'

//
//$str = 'ahb acb aeb aeeb adcb axeb';
//
//echo preg_replace('/a.b/','!', $str);


// 2. Дана строка 'aba aca aea abba adca abea'.
// Напишите регулярку, которая найдет строки abba adca abea по шаблону: буква 'a', 2 любых символа, буква 'a'.

//$str = 'aba aca aea abba adca abea';
//
//echo preg_replace('/a..a/', '!', $str);

// 3. Дана строка 'aba aca aea abba adca abea'.
// Напишите регулярку, которая найдет строки abba и abea, не захватив adca.

//$str = 'aba aca aea abba adca abea';
//
//echo preg_replace('/ab.a/', '!', $str);

// 4. Дана строка 'aa aba abba abbba abca abea'.
// Напишите регулярку, которая найдет строки
// aba, abba, abbba по шаблону: буква 'a', буква 'b' любое количество раз, буква 'a'.


//$str = 'aa aba abba abbba abca abea';
//
//echo preg_replace('/ab+a/','!', $str);

// 5. Дана строка 'aa aba abba abbba abca abea'.
// Напишите регулярку, которая найдет строки aa, aba, abba, abbba по шаблону:
// буква 'a', буква 'b' любое количество раз (в том числе ниодного раза), буква 'a'.

//$str = 'aa aba abba abbba abca abea';
//
//echo preg_replace('/a+b*a/', '!', $str);

// 6. Дана строка 'aa aba abba abbba abca abea'.
// Напишите регулярку, которая найдет строки aa, aba по шаблону:
// буква 'a', буква 'b' один раз или ниодного, буква 'a'.

//$str = 'aa aba abba abbba abca abea';
//
//echo preg_replace('#ab?a#', '!', $str);

// 7. Дана строка 'ab abab abab abababab abea'.
// Напишите регулярку, которая найдет строки по шаблону:
// строка 'ab' повторяется 1 или более раз.


//$str = 'ab abab abab abababab abea';
//
//echo preg_replace('/(ab)+/', '!', $str);

// 8. Дана строка 'a.a aba aea'. Напишите регулярку, которая найдет строку a.a, не захватив остальные.


//$str = 'a.a aba aea';
//
//echo preg_replace('#a\.a#', '!', $str);

// 9. Дана строка '2+3 223 2223'. Напишите регулярку, которая найдет строку 2+3, не захватив остальные.

//$str = '2+3 223 2223';
//
//echo preg_replace('/2\+3/', '!', $str);


// 10. Дана строка '23 2+3 2++3 2+++3 345 567'.
// Напишите регулярку, которая найдет строки 2+3, 2++3, 2+++3,
// не захватив остальные (+ может быть любое количество).

//$str = '23 2+3 2++3 2+++3 345 567';
//
//echo preg_replace('/2\++3/', '!', $str);


// 11. Дана строка '23 2+3 2++3 2+++3 445 677'.
// Напишите регулярку, которая найдет строки 23, 2+3, 2++3, 2+++3, не захватив остальные.

// 12. Дана строка '*+ *q+ *qq+ *qqq+ *qqq qqq+'.
// Напишите регулярку, которая найдет строки *q+, *qq+, *qqq+, не захватив остальные.

//$str = '*+ *q+ *qq+ *qqq+ *qqq qqq+';
//
//echo preg_replace('/\*q+\+/', '!', $str);

// 13. Дана строка '*+ *q+ *qq+ *qqq+ *qqq qqq+'.
// Напишите регулярку, которая найдет строки *+, *q+, *qq+, *qqq+, не захватив остальные.

//$str = '*+ *q+ *qq+ *qqq+ *qqq qqq+';
//
//echo preg_replace('/\*q*\+/', '!', $str);

// 14. Дана строка 'aba accca azzza wwwwa'.
// Напишите регулярку, которая найдет все строки по краям которых стоят буквы 'a',
// и заменит каждую из них на '!'.
// Между буквами a может быть любой символ (кроме a).

//$str = 'aba accca azzza wwwwa';
//
//echo preg_replace('/a.+?a/', '!', $str);



// 15. Дана строка 'aa aba abba abbba abbbba abbbbba'.
// Напишите регулярку, которая найдет строки abba, abbba, abbbba и только их.


//echo preg_replace('#ab{2,4}a#', '!', 'aa aba abba abbba abbbba abbbbba');

// 16.  Дана строка 'aa aba abba abbba abbbba abbbbba'.
// Напишите регулярку, которая найдет строки вида aba, в которых 'b' встречается менее 3-х раз (включительно).

//echo preg_replace('#ab{0,3}a#','!','aa aba abba abbba abbbba abbbbba');

// 17. Дана строка 'aa aba abba abbba abbbba abbbbba'.
// Напишите регулярку, которая найдет строки вида aba, в которых 'b' встречается более 4-х раз (включительно).

//echo preg_replace('#ab{4,}a#','!', 'aa aba abba abbba abbbba abbbbba');

// 18. Дана строка 'a1a a2a a3a a4a a5a aba aca'.
// Напишите регулярку, которая найдет строки, в которых по краям стоят буквы 'a', а между ними одна цифра.


//echo preg_replace('#a\da#', '!', 'a1a a2a a3a a4a a5a aba aca');

// 19. Дана строка 'a1a a22a a333a a4444a a55555a aba aca'.
// Напишите регулярку, которая найдет строки, в которых по краям стоят буквы 'a',
// а между ними любое количество цифр. Показать решение.

//echo preg_replace('#a\d+a#', '!', 'a1a a22a a333a a4444a a55555a aba aca');

// 20. Дана строка 'aa a1a a22a a333a a4444a a55555a aba aca'.
// Напишите регулярку, которая найдет строки, в которых по краям стоят буквы 'a',
// а между ними любое количество цифр (в том числе и ноль цифр, то есть строка 'aa').

//echo preg_replace('#a\d*a#', '!', 'aa a1a a22a a333a a4444a a55555a aba aca');

// 21. Дана строка 'avb a1b a2b a3b a4b a5b abb acb'.
// Напишите регулярку, которая найдет строки следующего вида:
// по краям стоят буквы 'a' и 'b', а между ними - не число.

//echo preg_replace('#a\Db#', '!', 'avb a1b a2b a3b a4b a5b abb acb');

// 22. Дана строка 'ave a#b a2b a$b a4b a5b a-b acb'.
// Напишите регулярку, которая найдет строки следующего вида:
// по краям стоят буквы 'a' и 'b', а между ними - не буква и не цифра.

//echo preg_replace('#a\Wb#', '!', 'ave a#b a2b a$b a4b a5b a-b acb');

// 23. Дана строка 'ave a#a a2a a$a a4a a5a a-a aca'. Напишите регулярку, которая заменит все пробелы на '!'.

//echo preg_replace('#\s#', '!', 'ave a#a a2a a$a a4a a5a a-a aca');

//24. Дана строка 'aba aea aca aza axa'. Напишите регулярку, которая найдет строки aba, aea, axa, не затронув остальных.

//echo preg_replace( '#a[a-e]a#','!','aba aea aca aza axa');

// 25. Дана строка 'aba aea aca aza axa a.a a+a a*a'.
// Напишите регулярку, которая найдет строки aba, a.a, a+a, a*a, не затронув остальных.

//echo preg_replace('#a[b.+*]a#', '!', 'aba aea aca aza axa a.a a+a a*a');


// 26. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a', а между ними - цифра от 3-х до 7-ми.

//echo preg_replace('#a[3-7]a#', '!', 'aba aea a1a aza a3a a.a a+a a8a');


// 27. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a', а между ними - буква от a до g.

//echo preg_replace('#[a-g]#', '!','aba aea a1a aza a3a a.a a+a a8a' );


// 28. Напишите регулярку, которая найдет строки следующего вида:
// по краям стоят буквы 'a', а между ними - буква от a до f и от j до z.

//echo preg_replace('#[a-fj-z]#', '!','aba aea a1a aza a3a a.a a+a a8a' );

// 29. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a', а между ними - буква от a до f и от A до Z

//echo preg_replace('#[a-fA-Z]#', '!',$str );


// 30. Дана строка 'aba aea aca aza axa a-a a#a'. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a', а между ними - не 'e' и не 'x'.

//echo preg_replace('#a[^ex]a#','!', $str);

// 31. Дана строка 'wйw wяw wёw wqw'. Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'w', а между ними - буква кириллицы.

//echo preg_replace('#w[а-яА-ЯЁё]w#', '!', 'wйw wяw wёw wqw');

// 32. Дана строка 'aAXa aeffa aGha aza ax23a a3sSa'.
// Напишите регулярку, которая найдет строки следующего вида:
// по краям стоят буквы 'a', а между ними - маленькие латинские буквы, не затронув остальных

//echo preg_replace('#a[a-z]+a#', '!','aAXa aeffa aGha aza ax23a a3sSa');

// 33. Дана строка 'aAXa aeffa aGha aza ax23a a3sSa'.
// Напишите регулярку, которая найдет строки следующего вида:
// по краям стоят буквы 'a', а между ними - маленькие и большие латинские буквы, не затронув остальных.

//echo preg_replace('#a[a-zA-Z]+a#', '!', 'aAXa aeffa aGha aza ax23a a3sSa');

// 34. Дана строка 'aAXa aeffa aGha aza ax23a a3sSa'.
// Напишите регулярку, которая найдет строки следующего вида:
// по краям стоят буквы 'a', а между ними - маленькие латинские буквы и цифры, не затронув остальных.

//echo preg_replace('#a[a-z0-9]+a#', '!','aAXa aeffa aGha aza ax23a a3sSa' );

// 35. Дана строка 'ааа ббб ёёё ззз ййй ААА БББ ЁЁЁ ЗЗЗ ЙЙЙ'.
// Напишите регулярку, которая найдет все слова по шаблону: любая кириллическая буква любое количество раз. Показать решение.

//echo preg_replace('#[а-яА-ЯЁё]*#', '!', 'ааа ббб ёёё ззз ййй ААА БББ ЁЁЁ ЗЗЗ ЙЙЙ');

// 36. Дана строка 'aaa aaa aaa'. Напишите регулярку, которая заменит первое 'aaa' на '!'.

//echo preg_replace('#^aaa#','!','aaa aaa aaa');

// 37. Дана строка 'aeeea aeea aea axa axxa axxxa'. Напишите регулярку,
// которая найдет строки следующего вида: по краям стоят буквы 'a', а между ними
// - или буква 'e' любое количество раз или по краям стоят буквы 'a', а между ними - буква 'x' любое количество раз

//echo preg_replace('#a(e+|x+)a#', '!', 'aeeea aeea aea axa axxa axxxa');

// 38. Дана строка 'aeeea aeea aea axa axxa axxxa'.
// Напишите регулярку, которая найдет строки следующего вида:
// по краям стоят буквы 'a', а между ними - или буква 'e' два раза или буква 'x' любое количество раз.

//echo preg_replace('#a(ee|x+)a#','!', 'aeeea aeea aea axa axxa axxxa');

// 39. Дана строка 'xbx aca aea abba adca abea'.
// Напишите регулярку, которая вокруг каждого слова вставит '!' (получится '!xbx! !aca! !aea! !abba! !adca! !abea!').

//echo preg_replace('#\B#','!', 'xbx aca aea abba adca abea');

// 40. Дана строка 'a\a abc'. Напишите регулярку, которая заменит строку 'a\a' на '!'.

//echo preg_replace('#a\\\\a#','!', 'a\a abc');

// 41. Дана строка 'a\a a\\a a\\\a'. Напишите регулярку, которая заменит строку 'a\\\a' на '!'.

//echo preg_replace('#a\\\\{2}a#', '!','a\a a\\a a\\\a' );

// 42. Дана строка 'bbb /aaa\ bbb /ccc\'. Напишите регулярку, которая найдет содержимое всех конструкций /...\ и заменит их на '!'.

//echo preg_replace('#/[a-z]+\\\\#', '!', 'bbb /aaa\ bbb /ccc\\');

// 43. Дана строка 'bbb <b> hello </b>, <b> world </b> eee'.
// Напишите регулярку, которая найдет содержимое тегов <b> и заменит их на '!'.

//echo preg_replace('#<b>(.+?)</b>#', '!', 'bbb <b> hello </b>, <b> world </b> eee');

// 44. Дана строка 'aaa@bbb eee7@kkk'. Напишите регулярку, которая найдет строки по шаблону: любое количество букв и цифр,
// символ @, любое количество букв и цифр и поменяет местами то, что стоит до @ на то, что стоит после нее.
// Например, aaa@bbb должно превратиться в bbb@aaa.

//$str = 'aaa@bbb eee7@kkk';

//echo preg_replace('#([a-z0-9]+)@([a-z0-9]+)#', '$2@$1', $str);

// 45.  Дана строка вида 'a1b2c3'. Напишите регулярку, которая найдет все цифры и удвоит их количество таким образом:
// 'a11b22c33' (то есть рядом с каждой цифрой напишет такую же).

//$str = 'a1b2c3';
//
//echo  preg_replace('#\d#', '$0$0', 'a1b2c3');

// 46. Дана строка 'aae xxz 33a'. Найдите все места, где есть два одинаковых идущих подряд символа и замените их на '!'.

//$str = 'aae xxz 33a';
//
//echo preg_replace('#([a-z0-9])\1#','!','aae xxz 33a');

// 47. Дана строка 'aaa bcd xxx efg'. Найдите строки, состоящие из одинаковых символов (это будет aaa xxx).

//$str = 'aaa bcd xxx efg';

//echo preg_replace('#([a-z])\1+#', '!', $str);

// 48. С помощью preg_match определите, что переданная строка является емэйлом.
// Примеры емэйлов для тестирования mymail@mail.ru, my.mail@mail.ru, my-mail@mail.ru, my_mail@mail.ru, mail@mail.com, mail@mail.by, mail@yandex.ru.

//$str = 'mymail@mail.ru';
//
//echo preg_match('#^[a-z_.-]+@[a-z_.-]+\.[a-z]{2,3}$#', $str);

// 49. Дана строка с текстом, в котором могут быть емейлы. С помощью preg_match_all найдите все емэйлы.

//$str = 'mymail@mail.ru, my.mail@mail.ru, my-mail@mail.ru, my_mail@mail.ru, mail@mail.com, mail@mail.by, mail@yandex.ru';

//preg_match_all('#[a-z0-9_.-]+@[a-z_.-]+\.[a-z]{2,}#', $str, $m);

//var_dump($m);

// 50. С помощью preg_match определите, что переданная строка является доменом. Примеры доменов: site.ru, site.com, my-site123.com.

//$str = 'site.ru';
//
//echo preg_match('#^[a-z0-9-]+\.[a-z]{2,}$#', 'my-site.com');

// 51. С помощью preg_match определите, что переданная строка является доменом 3-го уровня.
// Примеры доменов: hello.site.ru, hello.site.com, hello.my-site.com.

//$str = 'hello.site.com';
//
//echo preg_match('#^[a-z0-9_.-]+\.[a-z0-9_.-]+\.[a-z]{2,}$#', $str);

// 52. С помощью preg_match определите, что переданная строка является доменом,
// название которого начинается с http. Примеры доменов: http://site.ru, http://site.com.

//$str = 'http://site.ru';
//
//echo preg_match('#^http://[a-z]+\.[a-z]{2,}$#', $str);

// 53. С помощью preg_match определите, что переданная строка является доменом вида http://site.ru.
// Протокол может быть как http, так и https.

//$str = 'https://site.ru';
//
//echo preg_match('#^https?://[a-z]+\.[a-z]{2,}$#', $str);

// 54. С помощью preg_match определите, что переданная строка является доменом.
// Протокол может быть как http, так и https.
// Домен может быть со слешем в конце: http://site.ru, http://site.ru/, https://site.ru, https://site.ru/.

//$str = 'http://site.ru/';
//
//echo preg_match('#^https?://[a-z]+\.[a-z]{2,}/?$#', $str);


// 55. С помощью preg_match определите, что переданная строка заканчивается расширением txt, html или php.
//
//$str = 'text.php';
//
//echo preg_match('#\.(txt|html|php)$#', $str);

// 56. С помощью preg_match определите, что переданная строка заканчивается расширением jpg или jpeg.

//echo preg_match('#\.jpe?g$#', 'maket.jpeg');

// 57. С помощью preg_match узнайте является ли строка числом, длиной до 12 цифр.

//$str = 1236711232143221;
//
//echo preg_match('#^\d{1,12}&#', $str);
