<?php

// 1.   Задача. Дан массив с числами. Создайте из него новый массив,
//      где останутся лежать только положительные числа. Создайте для этого вспомогательную функцию isPositive,
//      которая параметром будет принимать число и возвращать true, если число положительное, и false - если отрицательное.


//$arr = [13,41,22,43 , 42, 15, 76, 89, -97, -42, -67, 13];
//
//$newArr = [];
//
//function isPositive($num)
//{
//    if ($num > 0)
//    {
//        return true;
//    }
//    else
//    {
//        return false;
//    }
//}
//
//foreach ($arr as $item) {
//    if (isPositive($item))
//    {
//        $newArr[] = $item;
//    }
//}
//
//var_dump($newArr);
//


// 2.   Сделайте функцию isNumberInRange, которая параметром принимает число и проверяет, что оно больше нуля и меньше 10.
//      Если это так - пусть функция возвращает true, если не так - false.
//      Дан массив с числами. Запишите в новый массив только те числа, которые больше нуля и меньше 10-ти.
//      Для этого используйте вспомогательную функцию isNumberInRange из предыдущей задачи.

//function isNumberInRange($num)
//{
//    if($num > 0 && $num < 10)
//    {
//        return true;
//    }
//}
//
//$arr = [1, 2, 3, 4, 12, 43, 867, 2, 3];
//
//$newArr = [];
//
//foreach ($arr as $item) {
//    if (isNumberInRange($item))
//    $newArr[] = $item;
//}
//
//var_dump($newArr);

// 3.   Сделайте функцию getDigitsSum (digit - это цифра),
//      которая параметром принимает целое число и возвращает сумму его цифр.
//      Найдите все года от 1 до 2021, сумма цифр которых равна 13.
//      Для этого используйте вспомогательную функцию getDigitsSum из предыдущей задачи.

//function getDigitsSum($num)
//{
//    $k = array_sum(str_split($num));
//    return $k;
//};
//
//
//
//
//$arr = range(1, 2021);
//
//$newArr = [];
//
//foreach ($arr as $key)
//{
//    if (getDigitsSum($key) == 13)
//        $newArr[] = $key;
//
//}
//var_dump($newArr);
//


// 4.    Сделайте функцию isEven() (even - это четный), которая параметром принимает целое число и проверяет: четное оно или нет.
//       Если четное - пусть функция возвращает true, если нечетное - false.
//       Дан массив с целыми числами.
//       Создайте из него новый массив, где останутся лежать только четные из этих чисел.
//       Для этого используйте вспомогательную функцию isEven из предыдущей задачи.

//function isEven($num){
//    if(!($num % 2))
//        return true;
//}
//
//
//$arr = range(1,100);
//
//$newArr = [];
//
//foreach ($arr as $key)
//{
//    if (isEven($key) === true) {
//        $newArr[] = $key;
//    }
//}
//
//var_dump($newArr);


// 5.   Сделайте функцию getDivisors, которая параметром принимает число
//      и возвращает массив его делителей (чисел, на которое делится данное число).
//      Сделайте функцию getCommonDivisors, которая параметром принимает 2 числа, а возвращает массив их общих делителей.
//      Для этого используйте вспомогательную функцию getDivisors из предыдущей задачи.

//function getDivisors($num)
//{
//    $arr = [];
//    for ($i = 1; $i <= $num; $i++)
//    {
//        if(is_int($num / $i))
//        {
//            $arr[] = $i;
//        }
//    }
//    return $arr;
//}


//function getCommonDivisors ($num1, $num2)
//{
//    $a = [];
//    $b = [];
//    $c = [];
//    $a = getDivisors($num1);
//    $b = getDivisors($num2);
//    $c = array_intersect($a, $b);
//
//    var_dump($c);
//}
//
//
//getCommonDivisors(200, 200);